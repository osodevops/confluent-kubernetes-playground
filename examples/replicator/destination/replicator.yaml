apiVersion: platform.confluent.io/v1beta1
# Confluent Replicator is built as a connector, and so will use the `Connect` CRD.
kind: Connect
metadata:
  name: replicator
spec:
  mountedSecrets:
    - secretRef: kafka-pkcs12
  replicas: 1
  # Configure to have TLS encryption, and use auto-generated server certs
  tls:
    secretRef: tls-group1
  authorization:
    type: rbac
  image:
    # Use the `cp-enterprise-replicator-operator` Docker image, that contains the Replicator jars
    application: confluentinc/cp-enterprise-replicator-operator:6.1.1.0
    init: confluentinc/cp-init-container-operator:6.1.1.0
  podTemplate:
    resources:
      requests:
        cpu: 1
        memory: 2Gi
    envVars:
      # The  Confluent Replicator Monitoring Extension allows for detailed metrics from Replicator tasks to be
      # collected using an exposed REST API.
      # You'll need to update the version string in replicate-test-extension-<version>.jar based on what
      # CP version you are using
      - name: CLASSPATH
        value: /usr/share/java/kafka-connect-replicator/replicator-rest-extension-6.1.1.jar
  configOverrides:
    # When the Connect distributed cluster hosting Replicator has a REST endpoint with SSL encryption
    # enabled, you must configure security properties for the SSL keystore and truststore used by the
    # Replicator monitoring extension to communicate with other Connect nodes in the cluster.
    # `/mnt/sslcerts/truststore.jks` is the truststore location when auto-genarated certs are used.
    jvm:
#      - -Djavax.net.debug=all
#      - -Djavax.net.ssl.trustStore=/mnt/sslcerts/truststore.p12
#      - -Djavax.net.ssl.trustStorePassword=mystorepassword
    server:
      - connector.class=io.confluent.connect.replicator.ReplicatorSourceConnector
      # To activate the monitoring extension, configure this property
      - rest.extension.classes=io.confluent.connect.replicator.monitoring.ReplicatorMonitoringExtension,io.confluent.connect.security.ConnectSecurityExtension
      - admin.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required metadataServerUrls="https://kafka.destination.svc.cluster.local:8090" username="connect" password="connect-secret";
      - consumer.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required metadataServerUrls="https://kafka.destination.svc.cluster.local:8090" username="connect" password="connect-secret";
      - producer.sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required metadataServerUrls="https://kafka.destination.svc.cluster.local:8090" username="connect" password="connect-secret";
      - sasl.jaas.config=org.apache.kafka.common.security.oauthbearer.OAuthBearerLoginModule required metadataServerUrls="https://kafka.destination.svc.cluster.local:8090" username="connect" password="connect-secret";
      - confluent.metadata.basic.auth.user.info=connect:connect-secret
  dependencies:
    kafka:
      bootstrapEndpoint: kafka.destination.svc.cluster.local:9071
      authentication:
        type: plain
        jaasConfig:
          secretRef: mds-client-connect
      tls:
        enabled: true
    mds:
      endpoint: https://kafka.destination.svc.cluster.local:8090
      tokenKeyPair:
        secretRef: mds-public
      authentication:
        type: bearer
        bearer:
          secretRef: mds-client-connect
      tls:
        enabled: true
#    interceptor:
#      enabled: true