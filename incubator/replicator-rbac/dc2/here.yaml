apiVersion: v1
data:
  0_groups.ldif: |-
    dn: ou=groups,dc=test,dc=com
    objectClass: organizationalUnit
    objectClass: top
    ou: groups
  0_users.ldif: |-
    dn: ou=users,dc=test,dc=com
    objectClass: organizationalUnit
    objectClass: top
    ou: users
  1_alice.ldif: |-
    dn: cn=alice,ou=users,dc=test,dc=com
    userPassword: alice-secret
    objectClass: simpleSecurityObject
    objectClass: organizationalRole
    description: Alice is great at changing perspectives, but sometimes chases down rabbit holes
    cn: alice
  1_c3-test.ldif: |-
    dn: cn=testadmin,ou=users,dc=test,dc=com
    userPassword: testadmin
    description: testadmin user
    objectClass: simpleSecurityObject
    objectClass: organizationalRole
    cn: testadmin
  1_c3.ldif: |-
    dn: cn=c3,ou=users,dc=test,dc=com
    userPassword: c3-secret
    description: control center user
    objectClass: simpleSecurityObject
    objectClass: organizationalRole
    cn: c3
  1_connect.ldif: |-
    dn: cn=connect,ou=users,dc=test,dc=com
    userPassword: connect-secret
    description: connect user
    objectClass: simpleSecurityObject
    objectClass: organizationalRole
    cn: connect
  1_developers.ldif: |-
    dn: cn=developers,ou=groups,dc=test,dc=com
    objectClass: top
    objectClass: groupOfNames
    description: A group of software developers and the apps they are responsible for
    cn: developers
    member: cn=alice,ou=users,dc=test,dc=com
  1_emmy.ldif: |-
    dn: cn=emmy,ou=users,dc=test,dc=com
    userPassword: emmy-secret
    objectClass: simpleSecurityObject
    objectClass: organizationalRole
    description: Interested in action and conservation. If you like it, you should put a Noetherian Ring on it.
    cn: emmy
  1_erp.ldif: |-
    dn: cn=erp,ou=users,dc=test,dc=com
    userPassword: erp-secret
    description: erp user
    objectClass: simpleSecurityObject
    objectClass: organizationalRole
    cn: erp
  1_kafka.ldif: |-
    dn: cn=kafka,ou=users,dc=test,dc=com
    userPassword: kafka-secret
    description: kafka user
    objectClass: simpleSecurityObject
    objectClass: organizationalRole
    cn: kafka
  1_ksql.ldif: |-
    dn: cn=ksql,ou=users,dc=test,dc=com
    userPassword: ksql-secret
    description: ksql user
    objectClass: simpleSecurityObject
    objectClass: organizationalRole
    cn: ksql
  1_replicator.ldif: |-
    dn: cn=replicator,ou=users,dc=test,dc=com
    userPassword: replicator-secret
    description: replicator user
    objectClass: simpleSecurityObject
    objectClass: organizationalRole
    cn: replicator
  1_sr.ldif: |-
    dn: cn=sr,ou=users,dc=test,dc=com
    userPassword: sr-secret
    description: schema registry user
    objectClass: simpleSecurityObject
    objectClass: organizationalRole
    cn: sr
kind: ConfigMap
metadata:
  name: ldap-ldifs
  namespace: dc2
---
apiVersion: v1
data:
  tls.crt: |
    LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURzekNDQXB1Z0F3SUJBZ0lVVzkzMW
    QxNHM3VlY4cmJWb3BjS3o5cTBoTFRFd0RRWUpLb1pJaHZjTkFRRUwKQlFBd2FURUxNQWtH
    QTFVRUJoTUNWVk14Q3pBSkJnTlZCQWdNQWtOQk1SVXdFd1lEVlFRSERBeE5iM1Z1ZEdGcA
    pibFpwWlhjeEVqQVFCZ05WQkFvTUNVTnZibVpzZFdWdWRERVJNQThHQTFVRUN3d0lUM0Js
    Y21GMGIzSXhEekFOCkJnTlZCQU1NQmxSbGMzUkRRVEFlRncweU1qQTVNREV4TVRBME16Rm
    FGdzB5TlRBMU1qZ3hNVEEwTXpGYU1Ha3gKQ3pBSkJnTlZCQVlUQWxWVE1Rc3dDUVlEVlFR
    SURBSkRRVEVWTUJNR0ExVUVCd3dNVFc5MWJuUmhhVzVXYVdWMwpNUkl3RUFZRFZRUUtEQW
    xEYjI1bWJIVmxiblF4RVRBUEJnTlZCQXNNQ0U5d1pYSmhkRzl5TVE4d0RRWURWUVFECkRB
    WlVaWE4wUTBFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUU
    RQeDNRcHdGQVoKL0xEcFFTdnliSHhIdmV6emhudEM3OFkvQnJ3TXVuYUpEM3dQZXBpakcr
    TGRhVjZlVVhaOWl2Y3kvQW5hUHZTYwptM0ZFeXEvR0dheXdpQzlvK3Fqa2VkM3JtN3VQRH
    Zjdk10ZWNMVG9iV3hYUXlWWkF5V1I4Q3hRbFdocDNxd0NyCkM5Wk5ZVmNhMk0reldqRXlz
    Yy9Pd3BOQ29Ob3NMY1AvdTJ3Y3lJODd6TEQzN0wzWUVuNWVueWpSL1crYk10NkcKc1Nkbj
    hTMmNlU1dvRXRWaXh0WVE3OUdEcnlDL0NLVEZKcGFKZVdyV0w0RkhJVklsMnFUYjd6eW5l
    MFRoZEVZTwpISjN3TlErSWtsMGNtUytIVnV2SnJlRXErbGIvMVN0YXkvN0p1QTkyT0JpNm
    NkdGkwalhaQk9sUDNhQmt2anc3CmZqenZDWGlaSENmVkFnTUJBQUdqVXpCUk1CMEdBMVVk
    RGdRV0JCUUtFZXBvR21Ca2UyT3psTVcvT01sQUtVTlgKV2pBZkJnTlZIU01FR0RBV2dCUU
    tFZXBvR21Ca2UyT3psTVcvT01sQUtVTlhXakFQQmdOVkhSTUJBZjhFQlRBRApBUUgvTUEw
    R0NTcUdTSWIzRFFFQkN3VUFBNElCQVFBVjBTTmRLbml0K2JHaXFNSWpid3o5WS9rYW11b2
    ZSM2xPCkI1UVptYzV0eXA2enpjN0ZQRVArU09FaStEUE5JU2ZCZjE1NzJrc1lnNk0yY3A0
    SnM5M0JML2I1UVZ0RHhHV2sKMndubmVBZXdIYXRLZC9tUllobHFyb2hlNE5ncDNISE40OD
    hiOTIySElzU1BlbWgwT0pJV1NJcmhQcExQSXI4MgplcmFxMXZrYStIL1dkeGdOeDNkL1Q2
    Q3FEVWx2RGhRSjg4aUVPVUQ3Yk1XM0FpMXJUWWh2b0t1dFdFaHdrb29oClFLbWpZaFB0OF
    A4RWFSRlN4SWd5MjdTSTRCYXFBMWRnbzE3dTR4b2g0VGRaRmU1cnVKOXIxRVk2alNwaS9h
    TDIKM3lzYjVwWjdreXJ6VUpzbFdmYVFuWWJKd01KV2xXajc1clJ6Ujk5cHBud2RMMzFmQ1
    hjYwotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: |
    LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBejhkME
    tjQlFHZnl3NlVFcjhteDhSNzNzODRaN1F1L0dQd2E4RExwMmlROThEM3FZCm94dmkzV2xl
    bmxGMmZZcjNNdndKMmo3MG5KdHhSTXF2eGhtc3NJZ3ZhUHFvNUhuZDY1dTdqdzczTHpMWG
    5DMDYKRzFzVjBNbFdRTWxrZkFzVUpWb2FkNnNBcXd2V1RXRlhHdGpQczFveE1ySFB6c0tU
    UXFEYUxDM0QvN3RzSE1pUApPOHl3OSt5OTJCSitYcDhvMGYxdm16TGVockVuWi9FdG5Ia2
    xxQkxWWXNiV0VPL1JnNjhndndpa3hTYVdpWGxxCjFpK0JSeUZTSmRxazIrODhwM3RFNFhS
    R0RoeWQ4RFVQaUpKZEhKa3ZoMWJyeWEzaEt2cFcvOVVyV3N2K3liZ1AKZGpnWXVuSGJZdE
    kxMlFUcFQ5MmdaTDQ4TzM0ODd3bDRtUnduMVFJREFRQUJBb0lCQVFDYWw2TGxRWklYazd3
    cApBSFZyUEs1SFRwZFRKWmJtV2JJZHlLdjNxSEJ6VDlNVlRUanQrdHlUc2tkVThmV0FPUG
    50dERxOGFDVGx0SDNWCkdoMG4vb2hQSERSeUhqVzFNTHNlQnRQSS8vQ0g3SU1oVDBFeGcx
    YTY3bUkvZDloTXRvMTVzUTJLUmZBTVU1VlMKSTMrRW1SWUlNcTN5TXZ3VHNRK1IvazMxbX
    VOK2pDUVN5NFZQWUlFWDk5cGdHZVVPTms3eUpCMnRxYldNTEtRdAp0dHVDaTdmUEhBR0Nw
    bFpNS21lMURuRld5SWdsWUZaZlFkVjhYMlArdU8wSjh3OXNPbVdZOWNKenJvVlNkNUJSCm
    RsUFA1eUo3SThETGdjOEtnZ3hpNGswVGI1YXpaMDE4WVpWT05DdUhVbDRLMit3ZUVQbDIy
    WUZYZkxFSi91QWUKQW9DSk55bE5Bb0dCQU9nNHpNVGdWQngzRnJQVTJsSnAzTTV0VHF3eH
    IwdkdDd0pQS1FXQ1lWQnFzRjFyZ0dRLwpsdXN5RkkvTXFJdmErSzBYRTZSTTFHa1FFaVhi
    QVFFcEsvSGZmSXBjU21hSjd3ckl6OTNFU1I5OHZTR2UzQlZBCjA0d3FTTmFIaXJEcko4V1
    RLM05STTlvaG9ycWd5TmplNmpFSFJyVjRHSVNvWHFEMDRlNWtPZ3ZyQW9HQkFPVU4KOEhC
    dkpqd3ZBM3R1UUhIdHg2ZWxaOUhZaVNYUytlSFI5K1pkQTgvKzc0cHRWR1QyZjU2c2EwN1
    l6QzV6Zmp3Rgp4RWRVc3JERzdaZzYwNHJJK2hxaXpvVWhMa3lHTHlWT1U1MmFQN1JiOVhj
    VG8wRnlKcVhrTFMyNEg1V1JrcWJwCkIvMG0yZ09ldDB1OVE3RWdKcjY3U2Q4WjZkcjNuYl
    NkMFZkRmlHcy9Bb0dBVmpNWFY1Rkp4NU14R3luTXJNRGQKRk1jZ1oreTlmQ3dVVkJRY1R3
    NDVuMGNyRmxKY1Exb1RaRlNmcTAwMTEwdzkrTXBUSVM3ZnZld1lRSE1ONldkbQpCNCtFeE
    R0RDV0SVdxSE1vTGRLNXJmVjRveTA3MXF2TW12L3JMNjc2ZlhlY3VNdExXcS91eG02cjRB
    ams1UlBCCjdOY2RtU2p1T1BmaXdHNkdHeDZiS1djQ2dZQkQ5dXpmRDd2eW82aU8yVm41OU
    NvSHpvYU50NGlLVnAyYXFlaTYKeStLenR0dHc0WnZuRVZVd3ljeFZhdks2M2I0WkpVVG1Q
    WFdBQ3FhNVFzcytKUUJCSXduUWF0WUlFdEN1YXgxWQphRXA2dzhhRC9LbTJZNTZnSHFKaE
    xIOENyRjB0ZFh2UFc5WFl1U0YrTWJ5Q05CNEsvaHVmUFZzc2c4aWhyU3BPCmtPMDNsUUtC
    Z0dGUUxsbGF5WHkzZ3RSOTFWQUs1OEtITkQrOWV6L25oRDRpSkRlam5ubnl1ZjRLSnB4ZU
    1vdFgKWWJOWFQ2Tko1UFNzelgzSmRrRnJhQ1VFb1pFd3BibFJYM0pqN3hGcHdva1Z6RS93
    NWZaUWplVjhYZVI4UWlCbwpuMWs5V20xVldEMVcveEF5MWNqNHo5WmIyRitIdVVEcERlL0
    NELzl0d1N5T05xbVZNaEJGCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
kind: Secret
metadata:
  name: ca-pair-sslcerts
  namespace: dc2
type: kubernetes.io/tls
---
apiVersion: v1
data:
  basic.txt: dXNlcm5hbWU9a2Fma2EKcGFzc3dvcmQ9a2Fma2Etc2VjcmV0
  bearer.txt: dXNlcm5hbWU9a2Fma2EKcGFzc3dvcmQ9a2Fma2Etc2VjcmV0Cg==
  digest-users.json: ewogICJrYWZrYSI6ICJrYWZrYS1zZWNyZXQiCn0=
  digest.txt: dXNlcm5hbWU9ImthZmthIgpwYXNzd29yZD0ia2Fma2Etc2VjcmV0Ig==
  ldap.txt: dXNlcm5hbWU9Y249bWRzLGRjPXRlc3QsZGM9Y29tCnBhc3N3b3JkPURldmVsb3BlciEK
  mdsPublicKey.pem: |
    LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQU
    FPQ0FROEFNSUlCQ2dLQ0FRRUF3TXlqblA0cWZkVEtoQ1M1c1BiVgpxaVhWeVExNXdyZVZB
    c0VxRXNuTUZ0Mkp0TUwxM0VMT1Eyc3pXbjU3V3p1NzgyYnlFdFlGbEYzVG9WVzNjbDRkCk
    9KUnphU0VRNnhlMTBSL2k3VG5lSXRFUWZwSnIvMkw0YnVidVFSR05lL0tyTE1FMGl2cjl1
    NElFYmJSUytsdHUKNkE5Z2d6R2NhRFN4Vi9leUtNTlBhZEhRL0FONEJaaWpBZUtaY0RUan
    o2YkhqSjZFUTNZTmdxeW44NDZyZVFrOQpUb0habDhiR0hPaHo1Qzd5b0lmc3haZ1lIbG54
    NkpHc2lVWjVQMzZXR2MzOFpJQi9tNDVvOGN2NGlmVVZQVUIwCklRUTlBaFlJNVp1TXJ4RH
    NSUERYMkdHNkU1YlcydnFEV3lxWE9ZN2NTb0k3QWlrRmR3QVRXNFJ2N2V1RUpVeXoKTndJ
    REFRQUIKLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0t
  mdsTokenKeyPair.pem: |
    LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBd015am
    5QNHFmZFRLaENTNXNQYlZxaVhWeVExNXdyZVZBc0VxRXNuTUZ0Mkp0TUwxCjNFTE9RMnN6
    V241N1d6dTc4MmJ5RXRZRmxGM1RvVlczY2w0ZE9KUnphU0VRNnhlMTBSL2k3VG5lSXRFUW
    ZwSnIKLzJMNGJ1YnVRUkdOZS9LckxNRTBpdnI5dTRJRWJiUlMrbHR1NkE5Z2d6R2NhRFN4
    Vi9leUtNTlBhZEhRL0FONApCWmlqQWVLWmNEVGp6NmJIako2RVEzWU5ncXluODQ2cmVRaz
    lUb0habDhiR0hPaHo1Qzd5b0lmc3haZ1lIbG54CjZKR3NpVVo1UDM2V0djMzhaSUIvbTQ1
    bzhjdjRpZlVWUFVCMElRUTlBaFlJNVp1TXJ4RHNSUERYMkdHNkU1YlcKMnZxRFd5cVhPWT
    djU29JN0Fpa0Zkd0FUVzRSdjdldUVKVXl6TndJREFRQUJBb0lCQVFDS3pJaFpoSTE0cTFI
    awprai93eTdNRTNGb3RkUHNjbUdlNVpQRHlONzhyRXZDSlp2WHpUVkVMTGtqNU5DZUFoZC
    tJbXF0WnJpUzBMRndvClFQcGhacW5veXM3UGQ1T2pmQjFUNFgzUVJTSEx0UEVIL2tlcncw
    ZVJKOFdNcUtOUUFXTUVSRStjWXBkNmYxN0sKejlBUkZ2UWdNcm5MbVZLOW5ubXlGOHQyRn
    kyN3dxVVZCbVlYWC9tK25lLysyUzRQTzhac1BkM3dZMlk5UjhMVgp1ZmJIQytIMkV4QThu
    RTR6dGVmZzl6UHluMXdNaS9HTVVnMVdpQ1QzQjJ1M0Nac1dhWkp6Vkl0VDZ0N3FuQVpKCl
    h6a2dOcElIbjltV3V3aDhreGdNZDZzeERSQU9ENWlQZDZhOWkwb0xTYVMzLzBMRGV6VUxD
    MFZoVFB5M0cyb1IKQTBBSmVPblJBb0dCQVBWMXV6MXBQSkF0ZW1yOHdMaUtoUU9lOGpBc3
    h0blN6VjhGcWQxMXFKWWduaWh3YWkrWQprNDRoT0ovMDIvNnd5cTQ5RmhNR21reUZXdjVk
    VURFUkdWN01jWFA2YkVmWTVjMVArUGRSVUFtNUg1bmVmMzd6Ck5SOWY3b2lmVjNqKzQ5dX
    kyVmZVUUNyL2grVCt5d3pBb2MwaVp5WUdhSTF3aktYUXIzKzFvNTV2QW9HQkFNa1UKQnEy
    SWFJRHdvbUJnUUNLUWpDeS9BTmpRMzJ5TUFHSGYvbUUzMlJURnB1NVNaRUxlOXlyR1FyM3
    hIRnRROWFRTApWdjVQMDl3WmZiNElPZHAvM3d3SE1xRmpOak5kRzhzdzdSeU5TK3dmUUd1
    OHYxR2ZZc3N1QnVYaTl2MFhHWEZICldlbk5RRVVQYmliUmJvY0o5Mk9KVEpLNFAvczV2dj
    EzMkhEUi9wdTVBb0dCQUorWThTbTQ1endIbGZWQ2FqeVQKTkhGcVE2YTNOb1FpNEkzTUxP
    cGx1andDOFZMeDVOa1ZwN3RlTm1jcTJtLzdtNDAzQXNkVUg3ZHBiZ1M5djRwbgp4OHN2dX
    dUaDZzMjhaWTdkVk0vWit1U1hqY2lLTnZQZ1JzWWpwZ0VIT2VUZU5tRi9KSHBLODM0QnIr
    WmhGTDB4Cjh3SmlRQmNsUzQzTGhHZThES0JKQmgzWkFvR0FONWJIdWRYS1BrdElPS2lqVW
    1ydnRiY2dQdENQMCt4b2RxWjgKSnRoUHRVUm5QOStiUkRscnozRjhKaEt3S2phWmtqNW9V
    R28xUWRYeVEwVDI2WWNNWE1Eb3FHRkxMS3dDOFF1WApvWnNXY0RLN2xvMVp2dkQzV1FCaW
    U4OWhSTnJMOTlzbjZsRUtBWTJnZ0M3S0JaOGx1MmpMdUl3amRBcWsyR0gzCmZra3Z3RkVD
    Z1lBeVhqNXo2Q09QSURKMUUxVkxySml3MVlCWGFhN1pMazVFcHczUXZDTTdoVEtTRmJ1U0
    53c3AKRXVMbU03Zzh3TVBaQWJ6cy9SUU9hZjlJaEUveDUzZE8ySW1rNVBBUmFvRXNTRmpO
    RDRkcFZIYUtlbTJjQm9tdAp4NXEwU3FVVnE2eHY0MjIxM2dsQlFNREo0cVFYVHJzRUJkcE
    55bnY3b1ZlWFh3Y2FPVFVhQnc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
  plain-jaas.conf: |
    c2FzbC5qYWFzLmNvbmZpZz1vcmcuYXBhY2hlLmthZmthLmNvbW1vbi5zZWN1cml0eS5wbG
    Fpbi5QbGFpbkxvZ2luTW9kdWxlIHJlcXVpcmVkIHVzZXJuYW1lPSJrYWZrYSIgcGFzc3dv
    cmQ9ImthZmthLXNlY3JldCI7
  plain-users.json: |
    ewogICJrYWZrYV9jbGllbnQiOiAia2Fma2FfY2xpZW50LXNlY3JldCIsCiAgImMzIjogIm
    MzLXNlY3JldCIsCiAgImthZmthIjogImthZmthLXNlY3JldCIKfQ==
  plain.txt: dXNlcm5hbWU9a2Fma2EKcGFzc3dvcmQ9a2Fma2Etc2VjcmV0Cg==
kind: Secret
metadata:
  name: credential
  namespace: dc2
type: Opaque
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: ldap
  name: ldap
  namespace: dc2
spec:
  clusterIP: None
  ports:
  - name: ldap
    port: 389
  - name: ldaps
    port: 636
  selector:
    app: ldap
---
apiVersion: platform.confluent.io/v1beta1
kind: Connect
metadata:
  name: connect
  namespace: dc2
spec:
  authorization:
    type: rbac
  dependencies:
    kafka:
      authentication:
        jaasConfig:
          secretRef: credential
        type: plain
      bootstrapEndpoint: kafka:9071
      tls:
        enabled: true
    mds:
      authentication:
        bearer:
          secretRef: credential
        type: bearer
      endpoint: https://kafka:8090
      tls:
        enabled: true
      tokenKeyPair:
        secretRef: credential
  image:
    application: confluentinc/cp-server-connect:7.2.1
    init: confluentinc/confluent-init-container:2.4.0
  replicas: 0
  tls:
    autoGeneratedCerts: true
---
apiVersion: platform.confluent.io/v1beta1
kind: Connect
metadata:
  name: replicator
  namespace: dc2
spec:
  configOverrides:
    jvm:
    - -Djavax.net.ssl.trustStore=/mnt/sslcerts/truststore.jks
    - -Djavax.net.ssl.trustStorePassword=mystorepassword
    server:
    - rest.extension.classes=io.confluent.connect.replicator.monitoring.ReplicatorMonitoringExtension
    - connector.class=io.confluent.connect.replicator.ReplicatorSourceConnector
  dependencies:
    interceptor:
      enabled: true
    kafka:
      authentication:
        jaasConfig:
          secretRef: credential
        type: plain
      bootstrapEndpoint: kafka.dc2.svc.cluster.local:9071
      tls:
        enabled: true
  image:
    application: confluentinc/cp-enterprise-replicator:7.2.0
    init: confluentinc/confluent-init-container:2.4.0
  podTemplate:
    envVars:
    - name: CLASSPATH
      value: /usr/share/java/kafka-connect-replicator/replicator-rest-extension-7.2.0.jar
    resources:
      requests:
        cpu: 1
        memory: 2Gi
  replicas: 2
  tls:
    autoGeneratedCerts: true
---
apiVersion: platform.confluent.io/v1beta1
kind: Connector
metadata:
  name: replicator
  namespace: dc2
spec:
  class: io.confluent.connect.replicator.ReplicatorSourceConnector
  configs:
    confluent.license: ""
    confluent.topic.replication.factor: "1"
    dest.kafka.bootstrap.servers: kafka.dc2.svc.cluster.local:9071
    dest.kafka.sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule
      required username="kafka" password="kafka-secret";
    dest.kafka.sasl.mechanism: PLAIN
    dest.kafka.security.protocol: SASL_SSL
    dest.kafka.ssl.truststore.location: /mnt/sslcerts/truststore.jks
    dest.kafka.truststore.password: mystorepassword
    key.converter: io.confluent.connect.replicator.util.ByteArrayConverter
    src.consumer.confluent.monitoring.interceptor.bootstrap.servers: kafka.source.svc.cluster.local:9092
    src.consumer.confluent.monitoring.interceptor.sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule
      required username="kafka" password="kafka-secret";
    src.consumer.confluent.monitoring.interceptor.sasl.mechanism: PLAIN
    src.consumer.confluent.monitoring.interceptor.security.protocol: SASL_SSL
    src.consumer.confluent.monitoring.interceptor.ssl.truststore.location: /mnt/sslcerts/truststore.jks
    src.consumer.confluent.monitoring.interceptor.ssl.truststore.password: mystorepassword
    src.consumer.group.id: replicator
    src.consumer.interceptor.classes: io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor
    src.kafka.bootstrap.servers: kafka.source.svc.cluster.local:9071
    src.kafka.sasl.jaas.config: org.apache.kafka.common.security.plain.PlainLoginModule
      required username="kafka" password="kafka-secret";
    src.kafka.sasl.mechanism: PLAIN
    src.kafka.security.protocol: SASL_SSL
    src.kafka.ssl.truststore.location: /mnt/sslcerts/truststore.jks
    src.kafka.truststore.password: mystorepassword
    topic.whitelist: cfk-playground-producer-topic
    value.converter: io.confluent.connect.replicator.util.ByteArrayConverter
  connectClusterRef:
    name: replicator
  connectRest:
    authentication:
      bearer:
        secretRef: credential
      type: bearer
  taskMax: 4
---
apiVersion: platform.confluent.io/v1beta1
kind: ControlCenter
metadata:
  name: controlcenter
  namespace: dc2
spec:
  authorization:
    type: rbac
  dataVolumeCapacity: 10Gi
  dependencies:
    connect:
    - name: replicator
      tls:
        enabled: true
      url: https://replicator.dc2.svc.cluster.local:8083
    kafka:
      authentication:
        jaasConfig:
          secretRef: credential
        type: plain
      bootstrapEndpoint: kafka.dc2.svc.cluster.local:9071
      tls:
        enabled: true
    ksqldb:
    - name: ksqldb
      tls:
        enabled: true
      url: https://ksqldb:8088
    mds:
      authentication:
        bearer:
          secretRef: credential
        type: bearer
      endpoint: https://kafka:8090
      tls:
        enabled: true
      tokenKeyPair:
        secretRef: credential
    schemaRegistry:
      tls:
        enabled: true
      url: https://schemaregistry.dc2.svc.cluster.local:8081
  image:
    application: confluentinc/cp-enterprise-control-center:7.2.0
    init: confluentinc/confluent-init-container:2.4.0
  monitoringKafkaClusters:
  - authentication:
      jaasConfig:
        secretRef: credential
      type: plain
    bootstrapEndpoint: kafka.source.svc.cluster.local:9071
    name: source
    tls:
      enabled: true
  podTemplate:
    resources:
      requests:
        cpu: 1
        memory: 2Gi
  replicas: 1
  tls:
    autoGeneratedCerts: true
---
apiVersion: platform.confluent.io/v1beta1
kind: Kafka
metadata:
  name: kafka
  namespace: dc2
spec:
  authorization:
    superUsers:
    - User:kafka
    type: rbac
  configOverrides:
    server:
    - auto.create.topics.enable=true
    - confluent.schema.registry.url=https://schemaregistry:8081
    - listener.name.internal.plain.sasl.server.callback.handler.class=io.confluent.security.auth.provider.ldap.LdapAuthenticateCallbackHandler
    - listener.name.external.plain.sasl.server.callback.handler.class=io.confluent.security.auth.provider.ldap.LdapAuthenticateCallbackHandler
    - listener.name.replication.plain.sasl.server.callback.handler.class=io.confluent.security.auth.provider.ldap.LdapAuthenticateCallbackHandler
    - authorizer.class.name=io.confluent.kafka.security.authorizer.ConfluentServerAuthorizer
    - confluent.authorizer.access.rule.providers=ZK_ACL,CONFLUENT
  dataVolumeCapacity: 10Gi
  dependencies:
    kafkaRest:
      authentication:
        bearer:
          secretRef: credential
        type: bearer
    zookeeper:
      authentication:
        jaasConfig:
          secretRef: credential
        type: digest
      endpoint: zookeeper:2182
      tls:
        enabled: true
  image:
    application: confluentinc/cp-server:7.2.1
    init: confluentinc/confluent-init-container:2.4.0
  listeners:
    external:
      authentication:
        jaasConfig:
          secretRef: credential
        jaasConfigPassThrough:
          secretRef: credential
        type: plain
      tls:
        enabled: true
    internal:
      authentication:
        jaasConfig:
          secretRef: credential
        jaasConfigPassThrough:
          secretRef: credential
        type: plain
      tls:
        enabled: true
  metricReporter:
    authentication:
      jaasConfigPassThrough:
        secretRef: credential
      type: plain
    enabled: true
    tls:
      enabled: true
  podTemplate:
    resources:
      requests:
        cpu: 100m
        memory: 512Mi
  replicas: 3
  services:
    mds:
      provider:
        ldap:
          address: ldap://ldap:389
          authentication:
            simple:
              secretRef: credential
            type: simple
          configurations:
            groupMemberAttribute: member
            groupMemberAttributePattern: cn=(.*),ou=users,dc=test,dc=com
            groupNameAttribute: cn
            groupObjectClass: groupOfNames
            groupSearchBase: ou=groups,dc=test,dc=com
            userMemberOfAttributePattern: cn=(.*),ou=users,dc=test,dc=com
            userNameAttribute: cn
            userObjectClass: organizationalRole
            userSearchBase: ou=users,dc=test,dc=com
          tls:
            enabled: true
        type: ldap
      tls:
        enabled: true
      tokenKeyPair:
        secretRef: credential
  tls:
    autoGeneratedCerts: true
---
apiVersion: platform.confluent.io/v1beta1
kind: KafkaRestClass
metadata:
  name: default
  namespace: dc2
spec:
  kafkaRest:
    authentication:
      bearer:
        secretRef: credential
      type: bearer
---
apiVersion: platform.confluent.io/v1beta1
kind: KafkaRestProxy
metadata:
  name: kafkarestproxy
  namespace: dc2
spec:
  authentication:
    basic:
      secretRef: credential
    type: basic
  authorization:
    type: rbac
  dependencies:
    kafka:
      authentication:
        jaasConfig:
          secretRef: credential
        type: plain
      bootstrapEndpoint: kafka:9071
      tls:
        enabled: true
    mds:
      authentication:
        bearer:
          secretRef: credential
        type: bearer
      endpoint: https://kafka:8090
      tls:
        enabled: true
      tokenKeyPair:
        secretRef: credential
    schemaRegistry:
      authentication:
        basic:
          secretRef: credential
        type: basic
      url: https://schemaregistry:8081
  image:
    application: confluentinc/cp-kafka-rest:7.2.1
    init: confluentinc/confluent-init-container:2.4.0
  replicas: 1
  tls:
    autoGeneratedCerts: true
---
apiVersion: platform.confluent.io/v1beta1
kind: KsqlDB
metadata:
  name: ksqldb
  namespace: dc2
spec:
  authorization:
    type: rbac
  dataVolumeCapacity: 10Gi
  dependencies:
    kafka:
      authentication:
        jaasConfig:
          secretRef: credential
        type: plain
      bootstrapEndpoint: kafka:9071
      tls:
        enabled: true
    mds:
      authentication:
        bearer:
          secretRef: credential
        type: bearer
      endpoint: https://kafka:8090
      tokenKeyPair:
        secretRef: credential
  image:
    application: confluentinc/cp-ksqldb-server:7.2.1
    init: confluentinc/confluent-init-container:2.4.0
  replicas: 0
  tls:
    autoGeneratedCerts: true
---
apiVersion: platform.confluent.io/v1beta1
kind: SchemaRegistry
metadata:
  name: schemaregistry
  namespace: dc2
spec:
  authorization:
    type: rbac
  dependencies:
    kafka:
      authentication:
        jaasConfig:
          secretRef: credential
        type: plain
      bootstrapEndpoint: kafka.dc2.svc.cluster.local:9071
      tls:
        enabled: true
    mds:
      authentication:
        bearer:
          secretRef: credential
        type: bearer
      endpoint: https://kafka:8090
      tokenKeyPair:
        secretRef: credential
  image:
    application: confluentinc/cp-schema-registry:7.2.1
    init: confluentinc/confluent-init-container:2.4.0
  replicas: 1
  tls:
    autoGeneratedCerts: true
---
apiVersion: platform.confluent.io/v1beta1
kind: Zookeeper
metadata:
  name: zookeeper
  namespace: dc2
spec:
  authentication:
    jaasConfig:
      secretRef: credential
    type: digest
  dataVolumeCapacity: 10Gi
  image:
    application: confluentinc/cp-zookeeper:7.2.0
    init: confluentinc/confluent-init-container:2.4.0
  logVolumeCapacity: 10Gi
  podTemplate:
    resources:
      requests:
        cpu: 100m
        memory: 512Mi
  replicas: 3
  tls:
    autoGeneratedCerts: true
---
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: ldap
    role: ldap
  name: ldap
  namespace: dc2
spec:
  containers:
  - args:
    - --copy-service
    - --loglevel=debug
    env:
    - name: LDAP_ORGANISATION
      value: Test Inc.
    - name: LDAP_DOMAIN
      value: test.com
    - name: LDAP_ADMIN_PASSWORD
      value: confluentrox
    - name: LDAP_CONFIG_PASSWORD
      value: confluentconfigrox
    - name: LDAP_READONLY_USER
      value: "True"
    - name: LDAP_READONLY_USER_USERNAME
      value: mds
    - name: LDAP_READONLY_USER_PASSWORD
      value: Developer!
    - name: LDAP_TLS
      value: "False"
    image: osixia/openldap:1.3.0
    livenessProbe:
      initialDelaySeconds: 15
      periodSeconds: 20
      tcpSocket:
        port: 389
    name: ldap
    ports:
    - containerPort: 389
      name: ldap
    - containerPort: 636
      name: ldaps
    volumeMounts:
    - mountPath: /container/service/slapd/assets/config/bootstrap/ldif/custom
      name: customldif
    - mountPath: /var/lib/ldap
      name: ldap-data
    - mountPath: /etc/ldap/slapd.d
      name: ldap-config
  restartPolicy: Always
  volumes:
  - configMap:
      defaultMode: 420
      name: ldap-ldifs
    name: customldif
  - emptyDir: {}
    name: ldap-data
  - emptyDir: {}
    name: ldap-config
