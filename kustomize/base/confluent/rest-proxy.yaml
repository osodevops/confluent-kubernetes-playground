apiVersion: apps/v1
kind: StatefulSet
metadata:
  annotations:
    prometheus.io/port: "7778"
    prometheus.io/scrape: "true"
  labels:
    type: rest
  name: rest
spec:
  podManagementPolicy: Parallel
  replicas: 1
  selector:
    matchLabels:
      app: rest
      clusterId: confluent
      type: rest
  serviceName: rest
  template:
    metadata:
      labels:
        app: rest
        clusterId: confluent
        type: rest
      name: rest
    spec:
      containers:
        - name: rest
          image: confluentinc/cp-kafka-rest:6.1.1-1-ubi8
          imagePullPolicy: IfNotPresent

          env:
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KAFKA_REST_CONFIG_PROVIDERS
              value: file
            - name: KAFKA_REST_CONFIG_PROVIDERS_FILE_CLASS
              value: org.apache.kafka.common.config.provider.FileConfigProvider
            # duplicated for the proper generation of /etc/kafka-rest/admin.properties
            - name: KAFKA_REST_CLIENT_CONFIG_PROVIDERS
              value: file
            - name: KAFKA_REST_CLIENT_CONFIG_PROVIDERS_FILE_CLASS
              value: org.apache.kafka.common.config.provider.FileConfigProvider
            - name: KAFKA_REST_BOOTSTRAP_SERVERS
              value: kafka.confluent.svc.cluster.local:9071
            - name: KAFKA_REST_CLIENT_SECURITY_PROTOCOL
              value: SASL_SSL
            - name: KAFKA_REST_CLIENT_SASL_MECHANISM
              value: PLAIN
            - name: KAFKA_REST_CLIENT_SASL_JAAS_CONFIG
              value: org.apache.kafka.common.security.plain.PlainLoginModule required username="${file:/mnt/secrets/rest/plain.txt:username}" password="${file:/mnt/secrets/rest/plain.txt:password}";
            - name: KAFKA_REST_CLIENT_SSL_KEY_PASSWORD
              value: ${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
            - name: KAFKA_REST_CLIENT_SSL_KEYSTORE_LOCATION
              value: /mnt/sslcerts/keystore.jks
            - name: KAFKA_REST_CLIENT_SSL_KEYSTORE_PASSWORD
              value: ${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
            - name: KAFKA_REST_CLIENT_SSL_TRUSTSTORE_LOCATION
              value: /mnt/sslcerts/truststore.jks
            - name: KAFKA_REST_CLIENT_SSL_TRUSTSTORE_PASSWORD
              value: ${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
            - name: KAFKA_REST_LISTENERS
              value: https://0.0.0.0:8080,http://localhost:9080
            - name: KAFKA_REST_SSL_ENABLED_PROTOCOLS
              value: TLSv1.2
            - name: KAFKA_REST_SSL_KEY_PASSWORD
              value: ${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
            - name: KAFKA_REST_SSL_KEYSTORE_LOCATION
              value: /mnt/sslcerts/keystore.jks
            - name: KAFKA_REST_SSL_KEYSTORE_PASSWORD
              value: ${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
            - name: KAFKA_REST_SSL_TRUSTSTORE_LOCATION
              value: /mnt/sslcerts/truststore.jks
            - name: KAFKA_REST_SSL_TRUSTSTORE_PASSWORD
              value: ${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
            - name: KAFKA_REST_SCHEMA_REGISTRY_URL
              value: https://registry.confluent.svc.cluster.local:8081
            - name: KAFKA_REST_SCHEMA_REGISTRY_HTTPS_SSL_KEY_PASSWORD
              value: ${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
            - name: KAFKA_REST_SCHEMA_REGISTRY_HTTPS_SSL_KEYSTORE_LOCATION
              value: /mnt/sslcerts/keystore.jks
            - name: KAFKA_REST_SCHEMA_REGISTRY_HTTPS_SSL_KEYSTORE_PASSWORD
              value: ${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
            - name: KAFKA_REST_SCHEMA_REGISTRY_HTTPS_SSL_TRUSTSTORE_LOCATION
              value: /mnt/sslcerts/truststore.jks
            - name: KAFKA_REST_SCHEMA_REGISTRY_HTTPS_SSL_TRUSTSTORE_PASSWORD
              value: ${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
            - name: KAFKA_REST_CONFLUENT_REST_AUTH_PROPAGATE_METHOD
              value: JETTY_AUTH
            - name: KAFKA_REST_KAFKA_REST_RESOURCE_EXTENSION_CLASS
              value: io.confluent.kafkarest.security.KafkaRestSecurityResourceExtension
            - name: KAFKA_REST_REST_SERVLET_INITIALIZOR_CLASSES
              value: io.confluent.common.security.jetty.initializer.InstallBearerOrBasicSecurityHandler
            - name: KAFKA_REST_PUBLIC_KEY_PATH
              value: /mnt/secrets/rest/mdsPublicKey.pem
            - name: KAFKA_REST_CONFLUENT_METADATA_BOOTSTRAP_SERVER_URLS
              value: https://kafka.confluent.svc.cluster.local:8090
            - name: KAFKA_REST_CONFLUENT_METADATA_HTTP_AUTH_CREDENTIALS_PROVIDER
              value: BASIC
            - name: KAFKA_REST_CONFLUENT_METADATA_BASIC_AUTH_USER_INFO
              value: ${file:/mnt/secrets/rest/basic.txt:username}:${file:/mnt/secrets/rest/basic.txt:password}
            - name: KAFKA_REST_CONFLUENT_METADATA_SSL_TRUSTSTORE_LOCATION
              value: /mnt/sslcerts/truststore.jks
            - name: KAFKA_REST_CONFLUENT_METADATA_SSL_TRUSTSTORE_PASSWORD
              value: ${file:/mnt/sslcerts/jksPassword.txt:jksPassword}
          startupProbe:
            exec:
              command:
                - curl
                - http://localhost:9080/
            failureThreshold: 60
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          livenessProbe:
            exec:
              command:
                - curl
                - http://localhost:9080/
            failureThreshold: 5
            initialDelaySeconds: 10
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 5
          ports:
            - containerPort: 8080
              name: external
              protocol: TCP
            - containerPort: 9080
              name: internal
              protocol: TCP
            - containerPort: 7203
              name: jmx
              protocol: TCP
            - containerPort: 7777
              name: jolokia
              protocol: TCP
            - containerPort: 7778
              name: prometheus
              protocol: TCP

          volumeMounts:
            - mountPath: /mnt/sslcerts
              name: sslcerts
            - mountPath: /mnt/secrets/rest
              name: credentials
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      volumes:
        - name: sslcerts
          secret:
            defaultMode: 420
            secretName: rest-sslcerts
        - name: credentials
          secret:
            defaultMode: 420
            secretName: credential
  updateStrategy:
    type: RollingUpdate
---
apiVersion: v1
kind: Service
metadata:
  labels:
    type: rest
  name: rest
spec:
  clusterIP: None
  ports:
    - name: external
      port: 8080
      protocol: TCP
      targetPort: 8080
  publishNotReadyAddresses: false
  selector:
    app: rest
    clusterId: confluent
    type: rest
  sessionAffinity: ClientIP
  type: ClusterIP
---
